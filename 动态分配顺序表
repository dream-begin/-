#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#define initsize 10
typedef struct {
	int* data;
	int maxsize;
	int length;
}sqelist;
void initlist(sqelist& L)
{
	L.data = (int*)malloc(sizeof(int) * initsize);
	L.maxsize = initsize;
	L.length = 0;
}
void increaselist(sqelist& L, int e)
{
	int* p = L.data;
	L.data = (int*)malloc(sizeof(int) * (L.maxsize + e));
	for (int i = 0; i < L.length; i++)
		L.data[i] = p[i];
	L.maxsize += e;
	free(p);
}
bool listinsert(sqelist& L, int i, int e)
{
	if (i<1 && i>L.length + 1)
		return false;
	if (L.length >= L.maxsize)
		return false;
	for (int j = L.length; j >= i; j--)
		L.data[j] = L.data[j - 1];
	L.length++;
	return true;
}
bool deletelist(sqelist& L, int i, int &e)
{
	if (i<1 && i>L.length)
		return false;
	e = L.data[i - 1];
	for (int j = i; j < L.length; j++)
		L.data[j - 1] = L.data[j];
	L.length--;
	return true;
}
int getelem(sqelist L, int i)
{
	return L.data[i - 1];
}
int locateElem(sqelist L, int e)
{
	for (int i = 0; i < L.length; i++)
		if (L.data[i] == e)
			return i+1;
	return 0;
}
int main()
{
	sqelist L;
	initlist(L);
	locateElem(L, 45);
	return 0;
}
